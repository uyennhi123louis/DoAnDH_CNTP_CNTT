# -*- coding: utf-8 -*-
"""ANN_DuBaoThoiTiet_Nhom22.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pgrLxl8GocnYethqi7q_xi5FLIjPRTo8
"""

!pip install tensorflow

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import keras
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import style
import seaborn as sns
import random
import shutil
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img
import matplotlib.pyplot as plt
import cv2

"""# Data"""

import cv2,os
data_path='/content/drive/MyDrive/THỰC HÀNH MÁY HỌC/WEATHER/'
categories=os.listdir(data_path)
labels=[]
for i in range(len(categories)):
  if i!=0:
   labels.append(categories[i])


print(labels)

img_size=100
data=[]

for category in labels:
    folder_path=os.path.join(data_path,category)
    img_names=os.listdir(folder_path)
        
    for img_name in img_names:
        img_path=os.path.join(folder_path,img_name)
        img=cv2.imread(img_path)

        try:  
            resized=cv2.resize(img,(img_size,img_size))
            #resizing the image  into 100x100, since we need a fixed common size for all the images in the dataset
            data.append([resized,category])
            #appending the image and the label(categorized) into the list (dataset)
        except Exception as e:
            print('Exception:',e)
            #if any exception rasied, the exception will be printed here. And pass

import random

random.shuffle(data)

X = []
Y = [] 
for features,labels in data:
  X.append(features)
  Y.append(labels)

X = np.array(X)
Y = np.array(Y)

for i in range(len(Y)):
  if Y[i]== 'shine':
    Y[i]= 0
  if Y[i]== 'rainy':
    Y[i]= 1
  if Y[i]== 'sunrise':
    Y[i]= 2
  if Y[i]== 'cloudy':
    Y[i]= 3
  if Y[i]== 'foggy':
    Y[i]= 4

import seaborn as sns
plt.figure(figsize=(9,7))
plt.style.use("fivethirtyeight")
sns.countplot(Y)
plt.show()

X = X.astype('float32')/255.0
Y = Y.astype('float32')/255.0

X.shape
X.shape

"""# Truc quan hoa du lieu"""

import random
fig = plt.figure(figsize=(12,7))
for i in range(15):
    sample =  random.choice(range(len(data)))
    image = X[sample]
    #category = target[sample]
    plt.subplot(3,5,i+1)
    plt.subplots_adjust(hspace=0.3)
    plt.imshow(image)

    
plt.tight_layout()
plt.show()

"""#split data"""

from sklearn.model_selection import train_test_split
X_train , X_test , y_train , y_test = train_test_split(X,Y,test_size=0.1)

"""#ANN"""

# building sequential model

model = keras.models.Sequential([
    keras.layers.Flatten(input_shape = X.shape[1:]),
    keras.layers.Dense(100, activation = 'relu'),
    keras.layers.Dense(70, activation = 'relu'),
    keras.layers.Dense(50, activation = 'relu'),
    keras.layers.Dense(20, activation = 'relu'),
    keras.layers.Dense(5, activation = 'softmax')
])

model.summary()

# compiling model
model.compile(loss = tf.keras.losses.SparseCategoricalCrossentropy(),
              
              optimizer = tf.keras.optimizers.Adam(lr=0.01), metrics = ['accuracy'])

# fitting model
model_history = model.fit(X_train,y_train, validation_data = (X_test,y_test), epochs = 20)

# evaluating model
loss,accuracy = model.evaluate(X_train,y_train)
print(f"Loss: {loss}")
print(f"Accuracy: {accuracy}")

# compiling model
import tensorflow as tf

model.compile(loss = tf.keras.losses.SparseCategoricalCrossentropy(),
              optimizer = tf.keras.optimizers.Adam(), metrics = ['accuracy'])

from tensorflow.keras.utils import plot_model

plot_model(model, show_shapes = True)

X_new = X_test[:5]
y_proba = model.predict(X_new)
y_proba.round(2)

y_preds=model.predict(X_new) 
classes_x=np.argmax(y_preds,axis=1)

'''plt.figure(figsize = (15, 12))
plotnumber = 1

for i in range(15):
    if plotnumber <= 15:
        x = plt.subplot(5, 10, plotnumber)
        plt.imshow(X_train[i], cmap = 'binary')
        plt.axis('off')
        plt.title(y_test[round(plotnumber)])
        
    plotnumber += 1
  
plt.tight_layout()
plt.show()'''

model.save('/content/drive/MyDrive/THỰC HÀNH MÁY HỌC/model_ANN.h5')

